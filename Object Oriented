//面向对象 C++/JAVA/PYTHON
//类CLASS -> 对象OBJECT
//类的变量：成员变量/域
//成员函数/方法
public class Cat {
	public void speak() {
		System.out.println("Meow");
	}
}

public class Dog {
	public void speak() {
		System.out.println("Bark");
	}
}

public class Main {
	public static void main(String[] args) {
		Dog dog = new Dog();
		Cat cat = new Cat();
		dog.speak(); //Bark
		cat.speak(); //Meow
	}
}

//构造函数Constructor用类来构建对象
class Person {
	String name;
	int age;
	String sex;
	
	public Person() { //默认构造函数/可以赋初值
		System.out.println("Constructor"); //主函数new的时候回调用
		name = "Cass";
		age = 10;
		sex = "Male";
	}
	
	void speak() {
		System.out.println("My name is " + this.name);
		System.out.println("My age is " + this.age);
		System.out.println("My sex is " + this.sex);
	}	
}

public class Main {
	public static void main(String[] args) {
		Person person = new Person();
		person.name = "Tom";
		person.age = "12";
		person.speak();
	}
}

//构造函数需要初值
class PersonN {
	String name;
	int age;
	String sex;
	
	//默认构造函数/可以赋初值,主函数new的时候会调用
	public PersonN(String personname) { 
		System.out.println("Constructor"); 
		name = personname;
		age = 10;
		sex = "Male";
	}
	
	//构造函数重载
	public PersonN(String personname, int personage) { 
		System.out.println("Constructor2"); 
		name = personname;
		age = personage;
		sex = "Male";
	}
	
	void speak() {
		System.out.println("My name is " + this.name);
		System.out.println("My age is " + this.age);
		System.out.println("My sex is " + this.sex);
	}	
}

public class Main {
	public static void main(String[] args) {
		PersonN person = new PersonN("Jack");
		person.age = "12";
		person.speak();
		PersonN person2 = new PersonN("Jack", 20);
	}
}

//this对象本身
	public PersonN(String name, int age) { 
		System.out.println("Constructor3"); 
		this.name = name;
		this.age = age;
		sex = "Male";
	}
	
//封装，继承，多态
//封装 （student, score, print name + ": " + score） 提高代码复用率，可读性，程序开发效率
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class EncapsulationExample {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Please input the number of students:");
        int n = scanner.nextInt();

        Student[] students = new Student[n];
        for (int i = 0; i < n; ++i) {
            System.out.println("Please input the name and score of student " + (i + 1) + " ,separated by space:");
            students[i] = new Student(); //学生对象的引用
            students[i].name = scanner.next(); //输入
            students[i].score = scanner.nextInt();
        }

        System.out.println("\nInput: ");
        for (Student student : students) {
            student.print();
        }

        Comparator<Student> comparator = new Comparator<Student>() {
            @Override
            public int compare(Student o1, Student o2) {
                return o2.score - o1.score;
            }
        };
        Arrays.sort(students, comparator);

        System.out.println("\nSorted: ");
        for (Student student : students) {
            student.print();
        }
    }
}

class Student {
    String name;
    int score;

    void print() {
        System.out.println(name + ": " + score);
    }
}

//Student-id-Class
class Student {
	public int id;
	
	public Student(int id) {
		this.id = id;
	}
}

public class Class {
	Student[] students = null;
	public Class(int n) {
		students = new Student[n];
		for (int i = 0; i < n; i++) {
			students[i] = new Student(i);
		}
	}
}

//Private-Public-get-set
class Person {
	private String name;
	private int age;
	private String sex;
	
	public String getname() {
		return name;
	}
	
	public void setage(int age) {
		if (age > 0 && age < 200) {
			this.age = age;
		}
	}
}