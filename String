//选择排序
if (a == null || a.length ==0)
	System.out.println("Not a valid array!");
for (int i = 0; i < a.length; i++) {
	for (int j = i; j < a.length; j++) {
		if (a[j] < a[i]) {
			tmp = a[i];
			a[i] = a[j];
			a[j] = tmp;
		}
	}
	
}

//插入排序
for (int i = 1; i < a.length; i++) {
	int j = i;
	int value = a[i];
	while(j > 0) {
		if (value < a[j-1]) {
			a[j] = a[j-1];
			j--;
		}
	}
	a[j] = value;
}
	
//冒泡排序
boolean exchange = true;
while (exchange) {
	exchange = false;
	for (int i = 0; i < a.length - 1; i++) {
		if (a[i] > a[i+1]) {
			tmp = a[i];
			a[i] = a[i+1];
			a[i+1] = tmp;
			exchange = true;
		}
	}
	
}

int[] a = new int[20];
a.length //20
String b = "cass ";
b.length(); //5
b.charAt(0); //某一位
b.substring(1,3); //"as" 子串，左闭右开 【｝

//比较两个字符串是否相等
if (s.length() != t.length()) return false;
int[] countS = new int[256];
int[] countT = new int[256];
for (int i = 0; i < s.length(); i++) {
	countS[(int)s.charAt(i)]++;
}
for (int j = 0; j < t.length(); j++) {
	countT[(int)t.charAt(i)]++;
}
for (int j = 0; j < 256; j++) {
	if (countS[i]!=countT[i]) 
	return false;
}
return true;

//source查找子串target index
if (source.length() < target.length)
	return -1;
for (int i = 0; i <= source.length() - target.length(); i++) {
	int j = 0;
	for (int j = 0; j < target.length(); j++) {
		if (source.charAt(i+j)!=target.charAt(j))
			break;
	}
	if (j == target.length())
			return i;	
	return -1;
}

Character.toLowerCase(c);
Character.isLetter(c);
Character.isDigit(c);
String[] array = s.split(" "); //按空格分开

StringBuffer sb = new StringBuffer();
sb.append("ss");
sb.toString();

//二分法
int left = 0;
int right = s.length - 1;
while (left + 1 < right) {
	int mid = (right - left)/2 + left;
	if (s[mid] == value) {
	return mid	
	} else if (s[mid] > value) {
		right = mid;
	} else {
		left = mid;   
	}	
}
if (s[left] == value) return left;
if (s[right] == value) return right;
return -1;

//查找出现的第一个位置
int left = 0;
int right = s.length - 1;
while (left + 1 < right) {
	int mid = left + (right - left)/2;
	if (s[mid] < value) {
		left = mid;
	} else {
		right = mid;
	}	
}
if (s[left] == value) return left;
if (s[right] == value) return right;
return -1;

