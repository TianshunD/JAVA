//链表
//Singly linked list
//定义一个类，包含起码两个域，属性和下一个节点
Class ListNode {
	String name;
	Listnode next;
	ListNode(String name) {
		this.name = name;
		this.next = null;
	}
}

//链表初始化
ListNode bob = new ListNode("Bob");
ListNode alice = new ListNode("Alice");
bob.next = alice;
ListNode  cass = new ListNode("Cass");
alice.next = cass;

//链表遍历操作
ListNode head = bob;
ListNode cur = head;
While (cur!=null) {
	//do something here
	cur = cur.next;
}

//链表按属性查找
ListNode head = bob;
ListNode cur = head;
int pos = 1;
While (cur!=null) {
	if (cur.name == "Cass") {
		return pos;
	}
	pos++;
	cur = cur.next;
}
return -1;

//链表按序号查找
ListNode head = bob;
ListNode cur = head;
int pos = 1;
While (cur!=null) {
	if (pos == required_pos) {
		return cur.name;
	}
	pos++;
	cur = cur.next;
}
return -1;

//链表插入
//Bob -> Alice -> ...  turn to  Bob -> Alice -> Mary -> ...
ListNode mary = new ListNode("Mary");
ListNode temp = alice.next;
alice.next = mary;
mary.next = temp;

//链表删除
//Bob -> Alice -> ...  turn to  Bob -> ...
ListNode temp = alice.next;
bob.next = temp;

//Convert a linked list to List
List<Integer> result = new ArrayList<>();
ListNode cur = head;
while (cur!=null) {
	result.add(cur.val);
	cur = cur.next;
}
return result;

//List<Integer> nums to linked list
if (nums.size() == 0) {
	return null;
}
ListNode head = null;
ListNode tail = null;
for (Integer num : nums) {
		ListNode cur = new ListNode(num);
	if (tail == null) {
		//第一次cur, head, tail指向同一节点
		head = cur;
		tail = head; 
	} else {
		tail.next = cur;
		tail.next = tail;
	}
}
return head;

//遍历 counter
int counter = 0;
while (head != null) {
	counter++;
	head = head.next;
}
return counter;

//插入有序NODE   dummy node to avoid edge case
ListNode dummy = new ListNode(0);
dummy.next = head;
ListNode cur = dummy;
//find
while (cur.next != null && cur.next.value <= input) {
	cur = cur.next;
}
//insert
ListNode newNode = new ListNode(input);
newNode.next = cur.next;
cur.next = newNode;
return dummy.next;

//reverse a linked list
ListNode temp = null, pre = null;
while (head!=null) {
	temp = head.next;
	head.next = pre;
	pre = head;
	head = temp;
}
return pre;

//Merge ListNode l1, l2
if (l1 == null && l2 == null) return null;
ListNode dummy = new ListNode(0);
ListNode cur = dummy;
while (l1 != null && l2 != null) {
	if (l1.val <= l2.val) {
		cur.next = l1;
		l1 = l1.next;
	} else {
		cur.next = l2;
		l2 = l2.next;		
	}
	cur = cur.next;
}
if (l1 != null) {
	cur.next = l1;
} else {
	cur.next = l2;
}
return dummy.next;

//Reverse a linked list from position m to n
public class Solution {
	public ListNode reverseBetween(ListNode head, int m, int n) {
		if (head == null) return null;
		ListNode dummy = new ListNode(0);
		dummy.next = head;
		
		//find pre node of the reverse head
		ListNode rhead = dummy;
		for (int i = 1; i < m; i++) {
			rhead = rhead.next;         
		}
		
		//reverse sublist
		ListNode prev = rhead.next;
		ListNode cur = prev.next;
		ListNode front = rhead;
		ListNode end = rhead.next;
		for (int i = m; i < n; i++) {
			ListNode temp = cur.next;
			cur.next = prev;
			prev = cur;
			cur = temp;
		}
		
		//connect into one linked list
		front.next = prev;
		end.next = cur;
		return dummy.next;
	}
}

//Deep copy RandomListNode next, random;
public class Solution {
	public RandomListNode copyRandomListNode(RandomListNode head) {
		if (head == null) return null;
		//1->2->3  ->  1->1'->2->2'->3->3'
		copynext(head);
		
		//copy 1=>3
		copyRandom(head);
		
		//1'->2'->3'
		return splitlist(head);
	}
	
	private void copynext(RandomListNode head) {
		while (head != null) {
			RandomListNode newNode = RandomListNode(head.value);
			newNode.next = head.next;
			head.next = newNode;
			head = newNode.next;
		}
	}
	
	private void copyRandom(RandomListNode head) {
		while (head != null) {
			if (head.random != null) {
				//head 的random对应的下一位就是新列表对应的random
				head.next.random = head.random.next;
			}
			head = head.next.random;
		}
	}
	
	private RandomListNode splitlist(RandomListNode head) {
		RandomListNode newHead = head.next;
		while (head != null) {
			RandomListNode temp = head.next;
			head.next = temp.next;
			head = head.next;
			if (temp.next != null) temp.next = temp.next.next;
		}
		return newHead;
	}
}

//Circular Linked list tail -> head;
if (head == null || head.next == null) return false;
ListNode slow = head;
ListNode fast = head.next;
while (slow != fast) {
	//有结束节点，无环
	if (fast.next == null || fast.next.next == null) return false;
	slow = slow.next;
	fast = fast.next.next;	
}
return true;



//Doubly linked list 
//3 fileds: Prev&Data&Next


