/*
    java.lang.Throwable:类是 Java 语言中所有错误或异常的超类。
        Exception:编译期异常,进行编译(写代码)java程序出现的问题
            RuntimeException:运行期异常,java程序运行过程中出现的问题
        Error:错误
            必须修改源代码,程序才能继续执行
 */
 //Solution1 throws ParseException
public class ExceptionTest {
    public static void main(String[] args) throws ParseException { //遇到Exception, JVM停止程序
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        Date date = format.parse("1996f-01-01-09"); //stop here
    }
}
//Solution2 try catch
public class ExceptionTest {
    public static void main(String[] args) {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Date date = format.parse("1996f-01-03"); //java.text.ParseException: Unparseable date: "1996f-01-03"
        } catch (ParseException e) {
            e.printStackTrace();
        }
		System.out.println("then"); //will run
    }
}

//RuntimeException:运行期异常,java程序运行过程中出现的问题
int[] arr = {1,2,3};
System.out.println(arr[0]);
try {
	System.out.println(arr[3]); //越界异常 Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3
} catch(Exception e){
	//异常的处理逻辑
	System.out.println(e);
}

/*
Error:错误
OutOfMemoryError: Java heap space
*/
int[] arr = new int[1024*1024*1024]; //Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
//必须修改代码,创建的数组小一点
int[] arr = new int[1024*1024];

//异常处理，JVM根据异常创建一个类（内容，原因，位置），抛出给方法的调用者main方法
//如果main方法没有异常的处理逻辑，抛给JVM
//JVM打印异常到控制台，并终止程序（中断处理）
//运行期异常交给JVM处理
//运行期异常,我们不用处理,默认交给JVM处理 NullPointerException and ArrayIndexOutOfBoundsException都是运行期异常
public static int getElement(int[] arr,int index){
        if(arr == null){
            throw new NullPointerException("传递的数组的值是null"); //抛出空指针异常 合法性判断 
        }

        if(index<0 || index>arr.length-1){
            throw new ArrayIndexOutOfBoundsException("传递的索引超出了数组的使用范围"); //抛出数组索引越界异常
        }

        int ele = arr[index];
        return ele;
    }
}

//Objects requireNonNull 简化if null
public static <T> T requireNonNull(T obj) {
            if (obj == null)
                throw new NullPointerException();
            return obj;
}

Objects.requireNonNull(null); //抛出异常
Objects.requireNonNull(null, "空指针异常"); //抛出异常并提示

//异常处理的第一种方式 throws
/*throws 异常处理的第一种方式,会把异常对象声明抛出给方法的调用者处理(自己不处理,给别人处理),最终交给JVM处理-->中断处理
修饰符 返回值类型 方法名(参数列表) throws AAAExcepiton,BBBExcepiton...{
            throw new AAAExcepiton("产生原因");
            throw new BBBExcepiton("产生原因");
            ...
        }
*/
//throw关键字抛出了编译期异常（编译期报错），必须处理，要么throws，要么try catch
//FileNotFoundException编译期异常
public static void main(String[] args) throws FileNotFoundException, IOException{ //main方法调用了readFile，继续抛出给JVM处理（中断处理）
        readFile("1111"); //Exception in thread "main" java.io.FileNotFoundException: 文件路径不是c:\a.txt

    }

    private static void readFile(String path) throws FileNotFoundException, IOException{ //先不处理，给方法的调用者处理
        if (!path.equals("c:\\a.txt")) {
            throw new FileNotFoundException("文件路径不是c:\\a.txt"); //抛出异常
        }
		if(!path.endsWith(".txt")) {
            throw new IOException("文件后缀名不对"); //two Exception case
        }
		System.out.println("路径没有问题！");
    }

//Exception可以直接声明父类，忽略子类
public static void main(String[] args) throws Exception{ //Exception是所有Exception的父类
        readFile("1111"); 
    }
//throws的缺陷，抛出方法给JVM处理之后的代码不会运行
	
//异常处理的第二种方式，try catch 捕获异常，异常自己处理，异常后面的代码还会运行
try {
	//可能产生异常的代码
} catch() { //catch定义异常变量
	//异常的处理逻辑，运行try时如果没有产生异常则不会运行catch之后的异常处理逻辑
}
public class ReadFileEx {
    public static void main(String[] args) {
        try {
            readFile("122");
			System.out.println("123"); //产生异常不会执行，会执行catch
        } catch (IOException e) { //catch中定义try中可能抛出的异常对象
            //e.printStackTrace();
            System.out.println(e.getMessage()); //文件后缀名不对
			System.out.println("IO Exception!"); //IO Exception!
			System.out.println(e.toString()); //java.io.IOException: 文件后缀名不对
			e.printStackTrace(); //***IDEA 默认 full information
			
        }
        System.out.println("then");

    }

    private static void readFile(String path) throws IOException{
        if(!path.endsWith(".txt")) {
            throw new IOException("文件后缀名不对");
        }
        System.out.println("文件没有问题！");
    }
}
//output
//IO Exception!
//then

//finally代码块，和try一起使用的
try {
} catch() { 
} finally { //无论是否出现异常，都一定会执行，只能和try一起使用，一般用于资源释放
}
try {
            readFile("122");
        } catch (IOException e) { 
            e.printStackTrace();
        } finally {
            System.out.println("资源释放！"); //即使出现异常，也会在执行完catch之后执行finally
        }
//Warning 避免在finally中写return语句，因为一定会返回finally中的结果
try {
	int a = 10;
	return a;
} catch(Exception e) {
	e.printStackTrace();
} finally {
	a = 20;
	return b; //会return 20
}
		
//多个异常，一次捕获多次处理
//一个try一个catch或者一个try多个catch（子类异常必须放在上面） 如果写在下面，父类异常被catch产生的类也可以接收子类异常（多态），下面那个子类就没有意义
//多个异常一次捕获一次处理，多个异常都用一个父类异常统一接收

//继承时子类处理父类异常
//父类异常什么样，子类异常什么样 可以抛出父类一样的异常/子类异常/或者直接不抛出异常
//父类如果没有抛出异常，子类不能抛出异常，只能try catch

//自定义异常
/*
    自定义异常类:
        java提供的异常类,不够我们使用,需要自己定义一些异常类
    格式:
        public class XXXExcepiton extends Exception | RuntimeException{
            添加一个空参数的构造方法
            添加一个带异常信息的构造方法
        }
     注意:
        1.自定义异常类一般都是以Exception结尾,说明该类是一个异常类
        2.自定义异常类,必须的继承Exception或者RuntimeException
            继承Exception:那么自定义的异常类就是一个编译期异常,如果方法内部抛出了编译期异常,就必须处理这个异常,要么throws,要么try...catch
            继承RuntimeException:那么自定义的异常类就是一个运行期异常,无需处理,交给虚拟机处理(中断处理)
 */
public class RegisterException extends /*Exception（编译期异常）*/ RuntimeException{
    //添加一个空参数的构造方法
    public RegisterException(){
        super();
    }

    /*
        添加一个带异常信息的构造方法
        查看源码发现,所有的异常类都会有一个带异常信息的构造方法,方法内部会调用父类带异常信息的构造方法,让父类来处理这个异常信息
     */
    public RegisterException(String message){
        super(message);
    }
}

//该用户已被注册提醒
public static void main(String[] args) throws RejesterException {
        ArrayList<String> nameList = new ArrayList<>();
        Collections.addAll(nameList, "Cass", "Dean", "Sam");
        Scanner scanner = new Scanner(System.in);
        System.out.print("Pls type in your user name: ");
        String name = scanner.next();
        if (nameList.contains(name)) {
            throw new RejesterException("Your user name has been taken!");
        }
        nameList.add(name);
        System.out.println("Successfully created!");
        System.out.println(nameList);
    }
	
	public static void main(String[] args)  {
        ArrayList<String> nameList = new ArrayList<>();
        Collections.addAll(nameList, "Cass", "Dean", "Sam");
        Scanner scanner = new Scanner(System.in);
        System.out.print("Pls type in your name: ");
        String name = scanner.next();
        if (nameList.contains(name)) {
            try {
                throw new RejesterException("Your user name has been taken!"); //满足if条件，异常会被抛出
            } catch (RejesterException e) { //接收RejesterException类异常
                e.printStackTrace();
                return; //结束程序
            }
        }
        nameList.add(name);
        System.out.println("Successfully created!");
        System.out.println(nameList);
    }

/*	
======================================================================================
多线程
特点：速度快，不安全
并发：两个或多个事件在同一时间段发生（交替执行）
并行：两个或多个事件在同一时刻发生（同时执行）
进程：进入到内存中的程序就叫进程  任务管理器
线程：进程的执行单元，一个进程可以有一个线程，可以有多个线程（多线程程序 e.g.,电脑管家，同时查杀，清理,点击功能，开辟一条应用程序到CPU的
执行路径，一条路径就是一条线程，CPU通过该路径执行功能） 如果单线程，CPU会在多个线程之间做高速切换
线程调度：
1. 分时调度： 轮流使用CPU时间，平均分配
2. 抢占式调度： 优先级别高的先使用，优先级别一样的随机调度，JAVA就用的是抢占式调度
*/

//主线程：执行main方法 如果单线程，从main方法从上到下依次执行
//实现多线程 1.Thread
public class ThreadSon extends Thread {
    @Override
    public void run() { //设置线程任务
        for (int i = 0; i < 20; i++) {
            System.out.println("Thread" + i);
        }
    }
}

public class ThreadCass {
    public static void main(String[] args) {
        ThreadSon thread = new ThreadSon();
        thread.start(); //开启新线程，开辟CPU执行路径，执行run方法
        for (int i = 0; i < 20; i++) {
            System.out.println("main" + i); //抢占CPU执行，谁抢到谁执行
        }

    }
}
//有了两条路径，CPU随机执行，就有了随机打印结果

//获取当前线程信息 
System.out.println(Thread.currentThread().getName()); //main/Thread-0
public class ThreadSon extends Thread {
    @Override
    public void run() {
        System.out.println(Thread.currentThread().getName());
    }
}
//改名 1.setName() 2.带参构造方法
ThreadSon thread = new ThreadSon();
thread.setName("线程一");
thread.start(); //线程一

//Thread静态方法sleep，在当前毫秒值内暂停
public class ThreadCass {
    public static void main(String[] args) {
        for (int i = 0; i < 20; i++) {
            System.out.println(i);
            try {
                Thread.sleep(1000); //1s打印一次
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

//2.Runnable接口实现类，只有run()方法，Thread可以通过Runnable实现对象构造，再start()； 推荐
public class RunnableImpl implements Runnable { //避免单继承的局限性
    @Override
    public void run() { //设置线程任务
        for (int i = 0; i < 20; i++) {
            System.out.println(Thread.currentThread().getName() + " " + i);
        }
    }
}
public class ThreadCass {
    public static void main(String[] args) {
        RunnableImpl run  = new RunnableImpl();
        Thread thread = new Thread(run);
        thread.start();
    }
}

//匿名内部类实现多线程
public static void main(String[] args) {
        Thread thread2 = new Thread() {
            @Override
            public void run() {
                for (int i = 0; i < 10; i++) {
                    System.out.println(Thread.currentThread().getName() + " " + i);
                }
            }
        };
        thread2.start();
    }
	
public static void main(String[] args) {
        Runnable run = new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i < 20; i++) {
                    System.out.println(Thread.currentThread().getName());
                }
            }
        };
        Thread thread = new Thread(run);
        thread.start();
    }
	
//多线程产生安全问题
public class RunnableImpl implements Runnable {
    private int ticket = 100;
    @Override
    public void run() { //设置线程任务
        while(true) { //死循环
            if (ticket>0) {
            System.out.println("ticket " + ticket + " sold!");
            ticket--;
            }
        }

    }
}

public class ThreadCass {
    public static void main(String[] args) {
        RunnableImpl run = new RunnableImpl();
        Thread thread1 = new Thread(run);
        Thread thread2 = new Thread(run);
        Thread thread3 = new Thread(run);
        thread1.start(); //三个线程处理任务有共有内容，会有重复，不存在的数据打印
        thread2.start();
        thread3.start();
    }
}
//解决线程安全问题
//1. 同步代码块
public class RunnableImpl implements Runnable {
    private int ticket = 100;
    Object obj = new Object(); //object对象作为锁对象
    @Override
    public void run() { 
        while(true) {
            synchronized(obj) { //对于可能导致线程不安全的部分添加锁，保证这部分内容只有一个线程在同时执行，这个区块的资源采用互斥访问
                if (ticket>0) {
                    System.out.println("ticket " + ticket + " sold!");
                    ticket--;
                }
            }
        }

    }
}
/* 正常运行结果
ticket 36 sold by Thread-0
ticket 35 sold by Thread-0
ticket 34 sold by Thread-0
ticket 33 sold by Thread-1
ticket 32 sold by Thread-1
ticket 31 sold by Thread-1
*/

//2.同步方法
public class RunnableImpl implements Runnable {
    private int ticket = 100;
    Object obj = new Object();
    @Override
    public void run() { 
        while(true) {
            sell();
        }

    }
    public synchronized void sell() { //为共享资源定义一个同步方法
        if (ticket>0) {
            System.out.println("ticket " + ticket + " sold " + "by " + Thread.currentThread().getName());
            ticket--;
        }
    }
}

//3.锁
Lock lock = new ReentrantLock();
    @Override
    public void run() { 
        while(true) {
            lock.lock(); //为线程加锁
            if (ticket>0) {
                System.out.println("ticket " + ticket + " sold " + "by " + Thread.currentThread().getName());
                ticket--;
            }
            lock.unlock(); //释放锁
        }

    }

//等待唤醒，线程之间的通信
//Object Wait()，Notify()必须被同步代码块包裹，保证只有一个在同时执行
public class WaitandNotify {
    public static void main(String[] args) {
        Object obj = new Object(); //创建锁对象
        new Thread() {
            @Override
            public void run() {
                System.out.println("Thread start!");
                synchronized (obj) { //同一个锁
                    try {
                        obj.wait(); //停着等待
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    System.out.println("Done!");
                }
            }
        }.start();
        new Thread() {
            @Override
            public void run() {
                try {
                    Thread.sleep(7000); //即便该线程先执行，也会sleep7s
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                synchronized(obj) {
                    System.out.println("Almost...");
                    obj.notify();
                }
            }
        }.start();
    }
}

//Case
public class Baozi {
    String pi;
    String xian;
    boolean flag = false;
}

public class BaoZiPu extends Thread{
    private Baozi baozi;
    public BaoZiPu(Baozi baozi) {
        this.baozi = baozi; //可以使用同一个Baozi对象作为锁对象
    }

    @Override
    public void run() { //生产包子
        int count = 0; //两种交替执行
        while (true) {
            synchronized(baozi) {
                if (baozi.flag) {
                    //if have, wait
                    try {
                        baozi.wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                if (count%2 == 0) {
                    baozi.pi = "薄皮";
                    baozi.xian = "三鲜";
                }
                if (count%2 == 1) {
                    baozi.pi = "厚皮";
                    baozi.xian = "猪肉";
                }
                System.out.println("包子铺正在生产" + baozi.pi + baozi.xian + "包子！");
                count++;
                try {
                    Thread.sleep(3000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                baozi.flag = true; //生产好了
                System.out.println("包子生产好了");
                baozi.notify();
            }
        }
    }
}

public class ChiHuo extends Thread{
    private Baozi baozi;

    public ChiHuo(Baozi baozi) {
        this.baozi = baozi;
    }

    @Override
    public void run() {
        while (true) {
            synchronized(baozi) {
                if (!baozi.flag) {
                    try {
                        baozi.wait();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                System.out.println("吃货正在吃" + baozi.pi + baozi.xian + "包子");
                try {
                    Thread.sleep(3000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                baozi.flag = false;
                System.out.println("吃完了！");
                baozi.notify();
                System.out.println("=================================");
            }
        }
    }
}

public class Test {
    public static void main(String[] args) {
        Baozi baozi = new Baozi();
        Thread thread1 = new BaoZiPu(baozi);
        Thread thread2 = new ChiHuo(baozi);
        thread1.start();
        thread2.start();
    }
}

//线程池 容器->集合
//底层LinkedList<Thread> java.util.concurrent.Executors:线程池的工厂类,用来生成线程池
//static ExecutorService newFixedThreadPool(int nThreads) 创建一个可重用固定线程数的线程池
//返回的是ExecutorService接口的实现类对象,我们可以使用ExecutorService接口接收
public class ThreadPool {
    public static void main(String[] args) {
        ExecutorService service = Executors.newFixedThreadPool(2); //1.用线程池的工厂类Executors生产一个指定线程数量的线程池
        service.submit(new RunnableImpl()); //3.调用ExecutorService中的方法submit,传递线程任务,执行run方法
        service.submit(new RunnableImpl());
        service.submit(new RunnableImpl());
    }
}
public class RunnableImpl implements Runnable { //2.实现Runnable接口设置线程任务
    @Override
    public void run() {
        System.out.println(Thread.currentThread().getName() + "正在执行！");
    }
}
//pool-1-thread-2正在执行！
//pool-1-thread-2正在执行！  执行完了会归还线程，线程池继续调用该线程执行
//pool-1-thread-1正在执行！

service.shutdown(); //销毁线程池，不建议执行

//========================================================================================
//lambda表达式
//必须有接口，而且有且仅有一个抽象方法（函数式接口）
//函数式编程，强调拿什么做什么，不在乎做的形式
//而面向对象，找一个能做的，用他的方法，做这件事情
//Java8 JDK1.8 加入lambda表达式，支持函数式编程
		//使用匿名内部类实现多线程
        new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println(Thread.currentThread().getName() + "创建了！");
            }
        }).start();

        //使用lambda表达式
        new Thread(() -> {
            System.out.println(Thread.currentThread().getName() + "创建了！");
        }).start();

//    ()       ->          {}
//(参数列表) 传递给 {重写接口抽象方法的代码}

//lambda表达式无参数无返回值
public interface Cook {
    public abstract void cook();
}
public class MoreTests {
    public static void main(String[] args) {
        useCook(() -> {
            System.out.println("Cook!"); //使用lambda表达式简化定义匿名内部类的流程
        });

    }
    private static void useCook(Cook cook) {
        cook.cook();
    }
}

//lambda表达式有参数有返回值
public class MoreTests {
    public static void main(String[] args) {
        Person[] array = new Person[] {
            new Person("cass",20),
            new Person("sam",19),
            new Person("lucy",18)
        };
        Arrays.sort(array, new Comparator<Person>() { 
            @Override
            public int compare(Person o1, Person o2) {
                return o1.getAge() - o2.getAge();
            }
        });
        for (Person person : array) {
            System.out.println(person);
        }
    }
}
//使用lambda表达式
Arrays.sort(array, (Person o1, Person o2)->{
            return o1.getAge() - o2.getAge();
        });
		
/*
    Lambda表达式精简：可推导内容可以省略
    凡是根据上下文推导出来的内容,都可以省略书写
    可以省略的内容:
        1.(参数列表):括号中参数列表的数据类型,可以省略不写
        2.(参数列表):括号中的参数如果只有一个,那么类型和()都可以省略
        3.{一些代码}:如果{}中的代码只有一行,无论是否有返回值,都可以省略({},return,分号)
            注意:要省略{},return,分号必须一起省略
 */
 Arrays.sort(array, (o1, o2)-> o1.getAge() - o2.getAge());