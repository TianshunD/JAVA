/*多态
父类引用指向子类对象
父类名称 对象名 = new 子类名称（）； 
接口名称 对象名 = new 实现类名称（）；
由于函数参数要求/统一声明等原因*/
public class Fu {
	public int num = 80;
	public void method() {
		System.out.println("Fu!");
	}
	public void methodFu() {
		System.out.println("父类方法！");
	}
	public void showNumber() {
		System.out.println(num);
	}
}
public class Zi extends Fu{
	//成员变量无法覆盖重写
	public int num = 40;
	@Override
	public void method() {
		System.out.println("子类方法！");
	}
	public void methodZi() {
		System.out.println("子类特有方法！");
	}
}
public class Multi {
	public static void main(String[] args) {
		Fu obj = new Zi();
		obj.method(); //子类方法！new的谁就优先用谁
		obj.methodFu(); //父类方法！子类没有使用父类方法
		System.out.println("=============");
		//直接通过对象名称访问，看等号左边是谁，没有就向上找，永远不会向下找 Fu obj =
		System.out.println(obj.num);//80
		//如果通过成员方法访问成员变量，该方法属于谁就优先找谁，没有就向上找
		obj.showNumber(); //子类没有覆盖重写，父类方法调用80
	}
}
//成员方法编译看左，运行看右
Fu obj = new Zi();
obj.methodZi(); //编译报错，声明的父类对象没有这个子类特有方法
obj.method(); //运行时看new的是子类对象，所以优先子类方法
//成员变量，静态方法编译运行均看左

//向上转型==========安全，从小范围转向大范围
//父类名称 对象名 = new 子类名称（）；子类对象当做父类来看待和使用
Animal animal = new Cat();
animal.catMethod(); //wrong编译看左
//=============
//向下转型，还原，最初new的时候必须是该还原类的对象才会成功，or ClassCastException
Cat cat = (Cat)animal;
cat.catMethod(); 

//instanceof判断父类引用的对象本来是什么子类, return boolean
animal instanceof Dog //false
animal instanceof Cat //true

//可能因为函数参数要求
public static void method(Animal animal) {	
	if (animal instanceof Dog) {
		Dog dog = (Dog)animal;
		dog.dogmethod();
	} else {	
		Cat cat = (Cat)animal;
		cat.catmethod();
	}
}
method(new Cat()); //also works

//USB case USB->Mouse/Keyboard
public interface USB {
	public abstract void open();
	public abstract void close();
}
public class Computer {
	public void powerOn() {
		System.out.println("On");
	}
	public void powerOff() {
		System.out.println("Off");
	}
	public void useDevice(USB usb) {
		usb.open();
		if (usb instanceof Mouse) {
			//向下转型
			Mouse mouse = (Mouse)usb;
			mouse.click();
		}
		usb.close();
	}
}
public class Mouse implements USB {
	@Override
	public void open() {
		System.out.println("打开鼠标");
	}
	@Override
	public void close() {
		System.out.println("关闭鼠标");
	}
	public void click() {
		System.out.println("鼠标点击");
	}
}
public class Keyboard implements USB {
	@Override
	public void open() {
		System.out.println("打开键盘");
	}
	@Override
	public void close() {
		System.out.println("关闭键盘");
	}
}

Computer computer = new Computer();
computer.powerOn();
computer.useDevice(new Mouse()); //Or USB usbMouse = new Mouse(); computer.useDevice(usbMouse);
computer.useDevice(new Keyboard());
computer.powerOff();

//final关键字
//1.修饰一个类，这个类不能有任何子类，可以有父类
public final class ClassFinal{	
}
//2.修饰一个方法，这个方法就是最终方法，无法被子类覆盖重写，abstract和final无法同时使用，矛盾
public final void method() {
}
//3.final作用于局部变量，无法更改
final int num = 200;
final num2;
num2 = 300; //可以，只要保证一次赋值
//对于引用来说地址值不可变
final Student stu1 = new Student("Cass");
stu1.getName(); //Cass
stu1.setName("Dean");
stu1.getName(); //Dean 地址值不可变，但是内部属性可能改变
//4.成员变量用了final必须直接一次赋值，或者通过constructor赋值
public final String name = "cass";

//内部类
//1.成员内部类，内用外随意，外用内需要内部类对象
public class MyClass {
	int num = 20;
	public class InnerClass { //成员内部类 编译成MyClass$InnerClass.class	
		int num = 10;
		public void methodInner() {
			int num = 5;
		    System.out.println(num); //5 就近原则
			System.out.println(this.num); //本身，内部类成员变量
			System.out.println(MyClass.this.num); //外部类的成员变量
		}
	}
	public void method() {
		new InnerClass.methodInner();		
	}
}
//直接创建内部类对象 外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();
psvm {
	MyClass.InnerClass obj = new MyClass().new InnerClass();
}
//2.局部内部类（包含匿名内部类），类是定义在一个方法内部的，只有当前方法可以使用，出了该方法无法使用
public class Outer {
	public void methodOuter() {
		class Inner {//局部内部类没有任何权限修饰词
			int num = 10;
			public void methodInner() {	
				System.out.println(num);
			}
		}
		Inner obj = new Inner();
		obj.methodInner();
	}
}
psvm {
	Outer out = new Outer();
	out.methodOuter(); //10
}
//局部内部类如果要访问所在方法的局部变量，该变量必须是final或者事实不变(没有重新赋值) 

/*匿名内部类
如果父类的子类/接口的实现类只需要使用唯一的一次，可以省略该类定义使用匿名内部类(省略为了使用接口进行实现类的定义)
接口名称 对象名 = new 接口名称（） ｛
	覆盖重写所有抽象方法
｝*/
MyInterface obj = new MyInterface() {
	@Override
	public void method() {
		System.out.println("匿名内部类实现！");
	}
}；
obj.method(); //匿名内部类实现！
new MyInterface() { //同时使用匿名对象和匿名内部类
	@Override
	public void method() {
		System.out.println("匿名内部类实现！");
	}
}。method()；
//1.如果需要两个不同的对象，就需要重新写一个，或者直接定义实现类

//多态e.g.,List接口，ArrayList实现类
List<Integer> list = new ArrayList<>();

//RedPacket Case (See RedPacketFrame.java detail in red case)
public class MyRed extends RedPacketFrame {
	public MyRed(String title) {
		super(title);
	}
}

//平均分配
public class NormalMode implements OpenMode{
    @Override
    public ArrayList<Integer> divide(final int totalMoney, final int totalCount) {
        ArrayList<Integer> redList = new ArrayList<>();
        //10元金额为1000分
        int avg = totalMoney / totalCount;
        int mod = totalMoney % totalCount;
        for (int i = 0; i < totalCount - 1; i++) {
            redList.add(avg);
        }
        redList.add(avg + mod);
        return redList;
    }
}


//随机分配
public class LuckyMode implements OpenMode {
    @Override
    public ArrayList<Integer> divide(final int totalMoney, final int totalCount) {
        ArrayList<Integer> redList = new ArrayList<>();

        //最多不超过剩下金额平均数的2倍
        Random random = new Random();
        int leftMoney = totalMoney;
        int leftCount = totalCount;

        //最后一个不随机
        for (int i = 0; i < totalCount - 1; i++) {
            int red = 1 + random.nextInt(leftMoney / leftCount * 2);
            leftMoney -= red;
            leftCount--;
            redList.add(red); //包红包
        }
        redList.add(leftMoney); //最后一个红包

        return redList;
    }
}

//普通红包 平均
//手气红包 随机
public class Bootstrap {
    public static void main(String[] args) {
        MyRed red = new MyRed("发红包了！！！");
        red.setOwnerName("Tianshun");

        //普通红包
        //OpenMode normal = new NormalMode();
        //red.setOpenWay(normal); //普通红包

        //手气红包
        OpenMode lucky = new LuckyMode();
        red.setOpenWay(lucky);
    }
}

//Override equals&toString，都是Object子类
public class Person {
    public String name;
    public int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public String toString() {
        return "My name is: " + this.name + ". My age is: " + this.age + ".";
    }

    @Override
    public boolean equals(Object obj) {
        //提高程序效率，optional
		if (obj == null) return false;
		if (obj == this) return true;
		
		if (obj instanceof Person) { //in case of ClassCastException
            Person toPerson = (Person)obj;
            return this.name == toPerson.name && this.age == toPerson.age;
        } else {
            return false;
        }
    }
}

//IDEA constructor
@Override
public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    Person person = (Person) o;
    return age == person.age && name.equals(person.name);
}
	
//test	
public class OverrideTest {
    public static void main(String[] args) {
        Person cass = new Person("cass", 19); //My name is: cass. My age is: 19.
        Person cass2 = new Person("cass", 19); //true
        System.out.println(cass.toString());
        System.out.println(cass.equals(cass2));
    }
}

//Objects JDK7，容忍空指针异常
String str1 = null;
String str2 = "Cass";
str1.equals(str2); //wrong!空对象不能调用方法、
Objects.equals(str1, str2); //false Objects类容忍空指针
